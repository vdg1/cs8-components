<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="_globals">
    <Code><![CDATA[begin
  //!module
  //\brief
  //This module contains declarations for system IO and system state flags.
  //
  //These variables can be used in a user application.
  //\note
  //This library is typically loaded in a user application using alias <code>SYS:</code>.
  //Therefor, for accessing a member of io_System the SYS: alias identifier has to be prepended, e.g.
  //<code>
  //if SYS:bRobotHome
  //  disablePower()
  //endIf
  //</code>
  //
  //!global nServiceRemain
  //Time given in hours until next service
  //
  //!global nPowerCountCtrl
  //Power count of controller
  //
  //The time the controller has been switched on in h.
  //!global doSignalHorn
  //Digital output to signal horn.
  //
  //The signal horn can be controlled in two ways.\n 
  //If setting panel:bSoundOn is true the type of signal indication
  //can be set for each state of the light tower. The settings are available on the MCP display in Advanced -> Edit System Settings ->
  // Sound Indication.\n
  //If setting panel:bSoundOn is false the signal horn is not under the system's control. With this setting the signal horn can be controlled
  //by the user application by controlling signal SYS:doSignalHorn.
  //\sa \ref LightAndSoundIndication
  //\note 
  //Output: N1_102[7]; Terminal +XR4.87
  //!global doLiTowerRed
  //Digital output to red light in signal tower.
  //
  //This output is controlled by the system state but it is also controlled by bUsrError.
  //\note 
  //Output: N1_103[4]; Terminal +XR4.92
  //\sa nStateRobot, bUsrWarningLow, bUsrWarningHigh, bUsrError, bBlockedUser, \ref LightAndSoundIndication
  //!global doLiTowerYellow
  //Digital output to yellow light in signal tower.
  //
  //This output is controlled by the system state but it is also controlled by bUsrWarningLow and bUsrWarningHigh.
  //\note 
  //Output: N1_103[3]; Terminal +XR4.91
  //\sa nStateRobot, bUsrWarningLow, bUsrWarningHigh, bBlockedUser, \ref LightAndSoundIndication
  //!global doLiTowerGreen
  //Digital output to green light in signal tower.
  //
  //This output is on if a robot cycle is active and E-Stop is inactive and bUsrError and bUserWarning are false.
  //\note 
  //Output: N1_103[2]; Terminal +XR4.90
  //\sa nStateRobot, bUsrWarningLow, bUsrWarningHigh, bUsrError, \ref LightAndSoundIndication
  //
  //!global bF7
  //\brief
  //is true if the function key F7 on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bF8
  //\brief
  //is true if the function key F8 on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bF_Start
  //\brief
  //is true if the function key START on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bF_Stop
  //\brief
  //is true if the function key STOP on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bF_End
  //\brief
  //is true if the function key END on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bF_Home
  //\brief
  //is true if the function key HOME on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bF_Off
  //\brief
  //is true if the function key ROBOT OFF on the MCP is pressed.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bHomeRetActive
  //\brief
  //is true if home return function is running.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global bPartMade
  //\brief
  //is true if a part has been produced by the machine and the part has not been ejected yet.
  //
  //bPartMade is set to true when the IMM has completely closed the mould.<br>
  //bPartMade is set to false if one of the following conditions is true:
  //<ul>
  //<li>The robot is disabled (ROBOT OFF), the IMM is not in automatic mode and the ejectors have completed a moving sequence.</li>
  //<li>The robot is disabled (ROBOT OFF), the IMM is not in automatic mode and the core 1 has completed a moving sequence.</li>
  //<li>One or more grippers have been closed while the robot is in the mould area.</li>
  //</ul>
  //\note
  //In case of applications where the robot only places parts inside the mould, the variable bPartMade must be explicitly reset in the user program, e.g:
  //<code>
  //movel(pImmPlace, tGripper, mdNormal)
  //waitEndMove()
  ////place insert in mould
  //call FUN:ReleasePart("1")
  ////reset bPartMade to allow next cycle start of IMM
  //SYS:bPartMade=false
  //</code>
  //!global bRobotHome
  //\brief
  //is true if the robot is at its home location.
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global btAux1
  //\brief
  //is true if the key Aux1 is pressed (either on MCP (F7 function key) or on control panel).
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global btAux2
  //\brief
  //is true if the key Aux2 is pressed (either on MCP (F8 function key) or on control panel).
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global btAux3
  //\brief
  //is true if the key Aux3 is pressed (either on MCP or on control panel).
  //
  //Although the variable has read write access it should only be read by a user program.
  //!global aiGrip
  //\brief
  //Analogue gripper feedback signals are linked to this aio array.
  //
  //!global bGrip
  //\brief
  //is an array that represents the state of the gripper feedback signal.
  //
  // If it is true the corresponding gripper has a part gripped. 
  //\obsolete
  //!global bModified
  //\brief
  //Indicates if data in the user application have been changed in the "Adjust" menu, e.g. locations
  // 
  //!global bMouldFree
  //\brief
  //is true if the flange and the tcp tGripCenter are out of mould area.
  // 
  //Although the variable has read write access it should only be read by a user program.
  //!global bRobotZero
  //\brief
  //is true if the robot is at its zero position.
  // 
  //Although the variable has read write access it should only be read by a user program.
  //!global bRobotHome
  //\brief
  //is true if the robot is at the home position defined in the currently loaded user application.
  // 
  //Although the variable has read write access it should only be read by a user program.
  //!global sAux1
  //\brief
  //A string containing the text that is displayed above the F7 function key.
  // 
  //The text is limited to four characters.
  //!global sAux2
  //\brief
  //A string containing the text that is displayed above the F8 function key.
  // 
  //The text is limited to four characters.
  //!global bBtStop
  //\brief
  // bBtStop is true if the STOP button is being pressed.
  // 
  // The source for the STOP function can be the control bar on the MCP or the digital input.
  //Although the variable has read write access it should only be read by a user program.
  //!global bBtStart
  //\brief
  // bBtStart is true if the START button is being pressed.
  // 
  // The source for the START function can be the control bar on the MCP or the digital input.
  //Although the variable has read write access it should only be read by a user program.
  //!global bBtEnd
  //\brief
  // bBtEnd is true if the END button is being pressed.
  // 
  // The source for the END function can be the control bar on the MCP or the digital input.
  //Although the variable has read write access it should only be read by a user program.
  //!global bBtHome
  //\brief
  // bBtHome is true if the HOME button is being pressed.
  // 
  // The source for the HOME function can be the control bar on the MCP or the digital input.
  //Although the variable has read write access it should only be read by a user program.
  //!global bBtRobotOff
  //\brief
  // bBtRobotOff is true if the ROBOT OFF button is being pressed.
  // 
  // The source for the ROBOT OFF function can be the control bar on the MCP or the digital input.
  //Although the variable has read write access it should only be read by a user program.
  //!global bBlockedCycle
  //\brief
  //bBlockedCycle is true if the robot is not moving for the time specified in data:nRobotBlocked
  //during production.
  //
  //This can be due to a signal condition that is missing in the task MP_MainProgram. Check the state
  //of task MP_MainProgram in the task manager.
  //!global bBlockedUser
  //\brief
  //bBlockedUser is true if robot movement is halted by the operator during running production.
  //
  //The robot can be halted by the operator if he presses the Move/Hold button on the MCP and thus 
  //puts the robot into hold mode. This condition is also indicated to the operator by a red light 
  //on the optionally connected light tower.
  //\sa doLiTowerRed
  //!global bCancelHomeCycl
  //\internal
  //!global bCycleEndCalled
  //\brief
  //is true if the operator has requested a cycle end by pressing the CYCLE END button.
  //
  //bCycleEndCalled is true as long as the robot is busy completing the last cycle or
  //if the operator presses CYCLE END again in order to cancel his previous cycle end request.
  //!global bCancelEndCycle
  //indicates if the operator is allowed to reset a pending "end cycle" request.
  //
  //By default the operator is allowed to reset a "end cycle" request at any time while to robot is active. 
  //For some applications it is necessary that a requested "end cycle" function cannot be reset by the 
  //operator again. In this case bCancelEndCycle must be set to true.
  //\note
  //Flag bCancelEndCycle is set to true on every cycle start automatically. In order to disallow
  // the function the flag needs to be set to false in the user program, e.g. in the start up section
  //of MP_MainProgram().
  //!global bStartInEndCycl
  //indicates if the IMM is started by calling FUN:StartMachine() in an active "end cycle" request.
  //
  //By default the function FUN:StartMachine() does not start an IMM cycle if the operator has requested
  // an "end cycle". In some applications, however it might be necessary to start an IMM cycle even during
  // a pending "end cycle" request, e.g. in applications where the robot places inserts in the mould and the
  // last cycle includes an IMM cycle with these inserts.
  //\note
  //Flag bStartInEndCycl is set to false on every cycle start automatically. In order to allow
  // the function the flag needs to be set to true in the user program, e.g. in the start up section
  //of MP_MainProgram().
  //!global nStateRobot
  //\brief
  //The value of \a nStateRobot indicates the state of the robot
  //<table>
  //<tr><td>Value</td><td>Description</td></tr>
  //<tr><td>0</td><td>The robot is idling</td></tr>
  //<tr><td>10</td><td>The robot is active and the cycle is running.</td></tr>
  //<tr><td>20</td><td>The robot movement is suspended, production cycle is halted due to a deteced gripper error or the operator has pressed
  //the STOP button, the CYCLE END button or the ROBOT OFF button.</td></tr>
  //<tr><td>25</td><td>The operator has pressed the HOME button while the robot was active (\a nStateRobot==10). The robot movement is suspended, production cycle is halted.</td></tr>
  //<tr><td>32</td><td>The home return function is active.</td></tr>
  //</table>
  //!global bUsrWarningLow
  //is true if an user application has detected a warning condition with low priority.
  //
  //If an user application detects a warning condition (e.g. a feeder is running low with parts), it can inform the operator
  //by setting the variable bUsrWarningLow to true.
  //bUsrWarningLow can be set explicitly by a user application, e.g.:
  //<code>
  //if bAlmostEmpty==true
  //  SYS:bUsrWarningLow=true
  //endIf
  //</code>
  //
  //As a consequence the yellow light on an optionally connected light tower is activated, but the robot cycle continues.
  //bUsrWarningLow must be reset by the user application, e.g.
  //in the home return function HR_HomeReturn().
  //\sa bUsrError, doLiTowerYellow, bUsrWarningHigh
  //!global bUsrWarningHigh
  //is true if an user application has detected a warning condition with high priority.
  //
  //If an user application detects a warning condition that requires immediate attention by the operator
  //(e.g. a feeder is running out of parts), it can inform the operator
  //by setting the variable bUsrWarningHigh to true.
  //bUsrWarningHigh can be set explicitly by a user application, e.g.:
  //<code>
  //if bIsEmpty==true
  //  SYS:bUsrWarningHigh=true
  //endIf
  //</code>
  //
  //As a consequence the yellow light on an optionally connected light tower starts flashing, but the robot cycle continues.
  //bUsrWarningHigh must be reset by the user application, e.g.
  //in the home return function HR_HomeReturn().
  //\sa bUsrError, doLiTowerYellow, bUsrWarningLow
  //!global bUsrError
  //is true if an user application has detected an error condition.
  //
  //If an user application detects an error condition (e.g. a time out in a feeding station, wrongly positioned parts), it can inform the operator
  //by setting the variable bUsrError to true.
  //bUsrError can be set explicitly by a user application, e.g.:
  //<code>
  //if bWrongPart==true
  //  SYS:bUsrError=true
  //endIf
  //</code>
  //bUsrError is implicitly set to true when function FUN:stopMove(string) is being called, e.g.:
  //<code>
  //if bWrongPart==true
  //  call FUN:stopMove("Wrong part in station")
  //endIf
  //</code>
  //
  //As a consequence the red light on an optionally connected light tower is activated and robot motion is being halted.
  //bUsrError is reset to false only if the robot cycle was active and the cycle has been resumed by the operator by pressing START.\n
  //If the operator breaks the cycle by executing a home return, bUsrError does not reset automatically. Thus bUsrError must be reset by the user application, e.g.
  //in the home return function HR_HomeReturn().
  //\sa FUN:stopMove(), bUsrWarningLow, bUsrWarningHigh, doLiTowerRed
  //!global bRecordForce
  //if true force recording in calls to FUN:movelLimited() is active.
  //
  //
  //\page LightAndSoundIndication  Light and Sound Indication
  //
  //The Plastics Innovation software is prepared to control a sound and light indication tower.
  //Below a table of states and their respective light indication:<br>
  //\n
  //Green Light:
  //<table>
  //<tr><td>On</td><td>Robot cycle is active (SYS:nStateRobot = 10)</td></tr>
  //<tr><td>Flashing</td><td>Not defined</td></tr>
  //<tr><td>Off</td><td>Robot cycle is stopped<br>Robot is off / IMM operation without robot</td></tr>
  //</table>
  //\n
  //Yellow Light:
  //<table>
  //<tr><td>On</td><td>Attention needed, low priority (SYS:bUsrWarningLow = true)</td></tr>
  //<tr><td>Flashing</td><td>Attention needed, high priority (SYS:bUsrWarningHigh = true)</td></tr>
  //<tr><td>Off</td><td>Robot is off / IMM operation without robot</td></tr>
  //</table>
  //\n
  //Red Light:
  //<table>
  //<tr><td>On</td><td>Acknowledged alarm pending</td></tr>
  //<tr><td>Flashing</td><td>Alarm pending which is not acknowledged yet by operator</td></tr>
  //<tr><td>Off</td><td>No Alarm pending</td></tr>
  //</table>
  //\n
  //An Alarm is asserted if one of the following conditions has occurred:
  //\li Emergency stop activated
  //\li Gripper fault detected
  //\li Robot cycle blocked (e.g. waiting for signal condition)
  //\li Robot movement suspended by operator (Move/Hold function on MCP)
  //\li User error (bUsrError = true)
end

      
      ]]></Code>
  </Program>
</Programs>